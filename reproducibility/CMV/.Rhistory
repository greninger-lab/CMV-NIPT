scale_x_log10() +
labs(color = 'Classification by RPM and number of reads') +
geom_point(size = 3 )
qpcrplot_copies_ml_plasma
read_counts <- read.csv("~/Documents/vikas/NIPT/clip_removed/cmv_full/read_counts.csv")
read_counts$cmv_bglobin_ratio_ml<-NA
for(i in 1:nrow(qpcr_results)){
for(j in 1:nrow(read_counts)){
if(grepl(as.character(qpcr_results$Sample.Name[i]), as.character(read_counts$sample[j]))){
read_counts$cmv_bglobin_ratio_ml[j]<-qpcr_results$CMv_quantity.ml_plasma[i]/qpcr_results$bglobin_quantity.ml_plasma[i]
}
}
}
ggplot(cmv_all_positives, aes(x=cmv_all_positives$read_counts) +
geom_histogram() +
scale_x_log10(breaks=c(1,2,3,4,5,6,10,20,50,100,200,500,1000))) +
geom_vline(aes(xintercept=15),color="blue", linetype="dashed", size=1) +
theme(panel.background = element_blank())
figure_1b_plot<-ggplot(cmv_all_positives, aes(x=read_counts)) +
geom_histogram(bins = 20, color= 'black') +
scale_x_log10() +
theme_classic() +
xlab('number of reads') +
ylab('Number of samples containing this many reads')+
scale_y_continuous(expand = c(0,0))
#geom_vline(aes(xintercept=15),color="blue", linetype="dashed", size=1)
figure_1b_plot
int_breaks <- function(x, n = 5) pretty(x, n)[pretty(x, n) %% 1 == 0]
df_for_graph<-read.csv('/Users/gerbix/Documents/vikas/NIPT/31119_download/34_mismatches/all_sample_data.csv')
figure_1b_plot_rpm<-ggplot(df_for_graph, aes(x=rpm, fill = classification)) +
geom_histogram(bins = 45, color = 'black') +
scale_x_log10() +
#stat_bin(geom="text", colour="white", size=3.5, aes(label=)) +
theme_classic() +
theme(legend.position='none') +
xlab('RPM of Fragments') +
ylab('Number of samples containing this RPM') +
scale_y_continuous(expand = c(0,0), breaks = int_breaks)
figure_1b_plot_rpm
figure_1b_plot_rpm<-ggplot(df_for_graph, aes(x=count, fill = classification)) +
geom_histogram(bins = 45, color='black') +
scale_x_log10() +
#scale_y_log10() +
#stat_bin(geom="text", colour="white", size=3.5, aes(label=)) +
theme_classic() +
#theme(legend.position='none') +
xlab('Number of fragments') +
ylab('Number of samples containing this RPM')
#scale_y_continuous(expand = c(0,0))
figure_1b_plot_rpm
df_for_graph<-read.csv('/Users/gerbix/Documents/vikas/NIPT/nipt_git_repo/reproducibility/all_sample_data.csv')
figure_1b_plot_fpm<-ggplot(df_for_graph, aes(x=rpm, fill = classification)) +
geom_histogram(bins = 45, color = 'black') +
scale_x_log10() +
#stat_bin(geom="text", colour="white", size=3.5, aes(label=)) +
theme_classic() +
theme(legend.position='none') +
xlab('RPM of Fragments') +
ylab('Number of samples containing this FPM') +
scale_y_continuous(expand = c(0,0), breaks = int_breaks)
int_breaks <- function(x, n = 5) pretty(x, n)[pretty(x, n) %% 1 == 0]
df_for_graph<-read.csv('/Users/gerbix/Documents/vikas/NIPT/nipt_git_repo/reproducibility/all_sample_data.csv')
figure_1b_plot_fpm<-ggplot(df_for_graph, aes(x=rpm, fill = classification)) +
geom_histogram(bins = 45, color = 'black') +
scale_x_log10() +
#stat_bin(geom="text", colour="white", size=3.5, aes(label=)) +
theme_classic() +
theme(legend.position='none') +
xlab('RPM of Fragments') +
ylab('Number of samples containing this FPM') +
scale_y_continuous(expand = c(0,0), breaks = int_breaks)
figure_1b_plot_fpm
df_for_graph<-read.csv('/Users/gerbix/Documents/vikas/NIPT/nipt_git_repo/reproducibility/all_sample_data.csv')
figure_1b_plot_fpm<-ggplot(df_for_graph, aes(x=fpm, fill = classification)) +
geom_histogram(bins = 45, color = 'black') +
scale_x_log10() +
#stat_bin(geom="text", colour="white", size=3.5, aes(label=)) +
theme_classic() +
theme(legend.position='none') +
xlab('RPM of Fragments') +
ylab('Number of samples containing this FPM') +
scale_y_continuous(expand = c(0,0), breaks = int_breaks)
figure_1b_plot_fpm
figure_1b_plot_fpm<-ggplot(df_for_graph, aes(x=fpm, fill = classification)) +
geom_histogram(bins = 45, color = 'black') +
scale_x_log10() +
#stat_bin(geom="text", colour="white", size=3.5, aes(label=)) +
theme_classic() +
theme(legend.position='none') +
xlab('FPM of Fragments') +
ylab('Number of samples containing this FPM') +
scale_y_continuous(expand = c(0,0), breaks = int_breaks)
figure_1b_plot_fpm
setwd('/Users/gerbix/Documents/vikas/NIPT/31119_download/qpcr_graph_update')
qpcr_results<-read.xlsx2('/Users/gerbix/Documents/vikas/NIPT/31119_download/qpcr_graph_update/qpcr_results.xlsx', sheetIndex = 3)
#read_counts <- read.csv("/Users/gerbix/Documents/vikas/NIPT/21419_download/bam_fragment_read_counts.csv")
cmv_all_positives<-read.csv('/Users/gerbix/Documents/vikas/NIPT/31119_download/34_mismatches/all_sample_data.csv', colClasses=c('character', 'character', 'character','character', 'character', 'character','character'))
qpcrplot_copies_microliter<-ggplot(qpcr_results, aes(x=qpcr_results$BGLOBIN_Quantity.10UL.DNA., y=qpcr_results$CMV_Quantity.10UL.DNA., color=qpcr_results$classification)) +
theme_classic() +
theme(legend.position= "bottom")+
xlab('Beta-globin copies per reaction') +
ylab('CMV copies per reaction') +
ylim(c(0,100))+
xlim(c(0,2500))+
#  scale_y_continuous(expand = c(0,0)) +
#  scale_x_continuous(expand = c(0,0)) +
labs(color = 'Classification by RPM and number of reads') +
geom_point(size = qpcr_results$size)
qpcrplot_copies_microliter
qpcrplot_copies_ml_plasma<-ggplot(qpcr_results, aes(x=qpcr_results$bglobin_quantity.ml_plasma, y=qpcr_results$CMv_quantity.ml_plasma, color=qpcr_results$classification)) +
theme_classic() +
theme(legend.position= "bottom")+
xlab('Beta-globin copies per mL Plasma') +
ylab('CMV copies per mL plasma') +
#ylim(c(0,100))+
#xlim(c(0,100))+
scale_y_log10() +
scale_x_log10() +
labs(color = 'Classification by RPM and number of reads') +
geom_point(size = 3 )
qpcrplot_copies_ml_plasma
read_counts <- read.csv("~/Documents/vikas/NIPT/clip_removed/cmv_full/read_counts.csv")
read_counts$cmv_bglobin_ratio_ml<-NA
for(i in 1:nrow(qpcr_results)){
for(j in 1:nrow(read_counts)){
if(grepl(as.character(qpcr_results$Sample.Name[i]), as.character(read_counts$sample[j]))){
read_counts$cmv_bglobin_ratio_ml[j]<-qpcr_results$CMv_quantity.ml_plasma[i]/qpcr_results$bglobin_quantity.ml_plasma[i]
}
}
}
ggplot(cmv_all_positives, aes(x=cmv_all_positives$read_counts) +
geom_histogram() +
scale_x_log10(breaks=c(1,2,3,4,5,6,10,20,50,100,200,500,1000))) +
geom_vline(aes(xintercept=15),color="blue", linetype="dashed", size=1) +
theme(panel.background = element_blank())
library(ggplot2)
library(Rsamtools)
library(svMisc)
library(seqinr)
library(reshape2)
library(cowplot)
setwd('/Users/gerbix/Documents/vikas/NIPT/31119_download/resequenced/deduplicating')
#read_counts <- read.csv("~/Documents/vikas/NIPT/clip_removed/cmv_full/read_counts.csv")
filenames = '/Volumes/Seagate8Tb1/resquenced_121R04_D01_CFFv1_NB0222/aligned_to_hg38/duplicates_removed_read_lengths.txt'
plotslist<-c()
dflist<-c()
statslist<-c()
totallengths<-c()
totaloccurences<-c()
for (i in 1:length(filenames)){
print(i)
#print(filenames[i])
if (file.size(filenames[i]) != 0) {
histo<- read.table(filenames[i], quote="\"", comment.char="")
colnames(histo)[2]<-'isize'
colnames(histo)[1]<-'freq'
histo$type<-'Human'
histo<-histo[histo$isize>0,]
if(nrow(histo)>0){
toremove<-which(histo[,2]> 500)
if(length(toremove)>0){
histo<-histo[-toremove,]
}
totallengths= append(totallengths,histo$isize)
totaloccurences =append(totaloccurences,histo$freq)
dflist[[i]]<-histo
}
}
}
human_frequencies <- do.call("rbind", dflist)
lengthlist<-c()
samplelist<-c()
read_counts$sample<-as.character(read_counts$sample)
human_frequencies$percent<-(100 * human_frequencies$freq) / (sum(human_frequencies$freq))
#human median calculation
human_isize_expanded<-rep(human_frequencies$isize, human_frequencies$freq)
human_isize_expanded_below250<-human_isize_expanded[human_isize_expanded < 500]
human_median<-median(as.numeric(as.character(human_isize_expanded_below250)))
human_frequencies$isize<-as.numeric(as.character(human_frequencies$isize))
x<-human_frequencies[order(human_frequencies$isize),]
x<-x[x$isize < 500 ,]
count = 1
sum = 0
x$percent<- (100 * x$freq)/ sum(x$freq)
while( sum < 50) {
print(sum)
print(x$isize[count])
sum = sum +  x$percent[count]
count = count + 1
}
human_plot<-ggplot(human_frequencies, aes( x = human_frequencies$isize , y = human_frequencies$percent)) +
geom_vline(xintercept = human_median) +
theme_classic() +
xlim(c(0,500)) +
xlab('insert size') +
ylab('percent')  +
geom_line()
human_plot
repeatmasked_fasta<-read.fasta('/Users/gerbix/Documents/vikas/NIPT/31119_download/resequenced/resequenced_repeatmasked_7_removed.fasta')
fasta_IDs<-names(repeatmasked_fasta)
fasta_IDs_trimmed<-c()
for( i in 1:length(fasta_IDs)){
progress(i,length(fasta_IDs))
fasta_IDs_trimmed<-append(fasta_IDs_trimmed,strsplit(fasta_IDs, '/')[[i]][1])
}
fasta_IDs_deduplicated<-fasta_IDs_trimmed[-(which(duplicated(fasta_IDs_trimmed)))]
isize<-c()
read_id<-c()
sample<-c()
temp_bam<-scanBam('/Users/gerbix/Documents/vikas/NIPT/31119_download/resequenced/deduplicating/cmv_duplicates_removed.bam')
all_bam_read_IDs<-temp_bam[[1]]$qname
matches<-c()
for(j in 1:length(fasta_IDs_deduplicated)){
print(100 * j / length(fasta_IDs_deduplicated))
for(k in 1:length(all_bam_read_IDs)){
if(grepl( fasta_IDs_deduplicated[j], all_bam_read_IDs[k])) {
isize<-append(isize, temp_bam[[1]]$isize[k])
read_id<-append(read_id, paste(temp_bam[[1]]$qname[k],'.1'))
sample<-append(sample, 'CMV')
}
}
}
CMV_matched<-data.frame(sample, read_id, isize)
CMV_matched<-CMV_matched[CMV_matched$isize>0,]
CMV_matched<-CMV_matched[CMV_matched$isize<500,]
CMV_matched<-CMV_matched[complete.cases(CMV_matched$isize),]
CMV_frequencies<-data.frame(table(CMV_matched$isize))
colnames(CMV_frequencies)<-(c('isize','freq'))
CMV_frequencies$percent<- 100 * ( as.numeric(as.character(CMV_frequencies$freq)) / (sum(CMV_frequencies$freq)))
CMV_frequencies$type<-'CMV'
#calculating CMV median
CMV_isize_exanded<-rep(CMV_frequencies$isize, CMV_frequencies$freq)
CMV_isize_exanded<-CMV_isize_exanded[as.numeric(as.character(CMV_isize_exanded)) < 500]
CMV_median<-median(as.numeric(as.character(CMV_isize_exanded)))
CMV_plot<-ggplot(CMV_frequencies, aes( x = as.numeric(as.character(CMV_frequencies$isize)) , y = CMV_frequencies$percent)) +
geom_vline(xintercept = 143, color = 'blue') +
theme_classic() +
xlim(c(0,500)) +
xlab('insert size') +
ylab('percent')  +
geom_line()
CMV_plot
combined<-rbind(human_frequencies,CMV_frequencies)
combined_plot <- ggplot(combined, aes ( x = as.numeric(as.character(combined$isize)), y = as.numeric(as.character(combined$percent)), color = combined$type)) +
theme_classic() +
theme(legend.position = "none") +
#theme_classic() +
xlim(c(0,500)) +
ylim(c(0,2.5)) +
scale_color_manual(values=c("#ED6464", "#05188B")) +
#geom_vline(xintercept = 168) +
#geom_vline(xintercept = 125) +
xlab('Insert size') +
ylab('Percent within each alignment') +
geom_line(size = .75)
combined_plot
#plot of just human insert sizes
human_plot<-ggplot(human_frequencies, aes( x = human_frequencies$isize , y = human_frequencies$percent)) +
geom_vline(xintercept = human_median) +
theme_classic() +
xlim(c(0,500)) +
xlab('insert size') +
ylab('percent')  +
geom_line()
human_plot
#provide repeatmasked fasta for 121r04 resequenced
repeatmasked_fasta<-read.fasta('/Users/gerbix/Documents/vikas/NIPT/31119_download/resequenced/resequenced_repeatmasked_7_removed.fasta')
fasta_IDs<-names(repeatmasked_fasta)
CMV_plot
combined_plot <- ggplot(combined, aes ( x = as.numeric(as.character(combined$isize)), y = as.numeric(as.character(combined$percent)), color = combined$type)) +
theme_classic() +
theme(legend.position = "none") +
#theme_classic() +
xlim(c(0,500)) +
ylim(c(0,2.5)) +
scale_color_manual(values=c("#ED6464", "#05188B")) +
#geom_vline(xintercept = 168) +
#geom_vline(xintercept = 125) +
xlab('Insert size') +
ylab('Percent within each alignment') +
geom_line(size = .75)
combined_plot
#combined plot #cum_frequency
#red: ED6464
#blue: 05188B
plot_grid(combined_plot, cum_frequency, labels = c('A','B'))
#p-value calculations
CMV_isize_exanded<-as.numeric(as.character(CMV_isize_exanded))
human_isize_expanded<-as.numeric(as.character(human_isize_expanded))
#two sided t test on insert sizes
t.test(human_isize_expanded,CMV_isize_exanded, alternative = "two.sided")
#running t tests 10000 iterations
tests<-c()
for(i in 1:10000){
progress(i,10000)
temp<-(sample(human_isize_expanded, length(CMV_isize_exanded)))
#print((temp))
ttest<-(t.test(temp,CMV_isize_exanded, paired = TRUE))
tests<-append(tests,ttest$p.value)
}
testsdf<-data.frame(tests)
#CMV is in 14th percentile of human insert size distribution
human_percentile<-ecdf(human_isize_expanded)
cmv_med_percentile<-human_percentile(median(CMV_isize_exanded)) * 100
#fligner-killeen test for homogeneity of variances between samples
tests<-c()
for(i in 1:10000){
progress(i,10000)
temp<-(sample(human_isize_expanded, length(CMV_isize_exanded)))
fktest<-(fligner.test(temp,CMV_isize_exanded, paired = TRUE))
tests<-append(tests,fktest$p.value)
}
fk_df<-data.frame(tests)
tests<-c()
for(i in 1:10000){
progress(i,10000)
temp<-(sample(human_isize_expanded, length(CMV_isize_exanded)))
#print((temp))
kstest<-(ks.test(temp,CMV_isize_exanded))
tests<-append(tests,kstest$p.value)
}
ks_df<-data.frame(tests)
median(ks_df$tests)
plot(ecdf(CMV_isize_exanded))
plot(ecdf(human_isize_expanded))
CMV_cdf <- ecdf(CMV_isize_exanded)
human_cdf <- ecdf(human_isize_expanded)
CMV_cdf
ks<-ks.test(CMV_isize_exanded,human_isize_expanded)
human_isize_df<-data.frame(human_isize_expanded)
cmv_isize_df<-data.frame(CMV_isize_exanded)
plot(ecdf(CMV_isize_exanded))
plot(ecdf(human_isize_expanded),add = TRUE, col = 2 )
human_cdf_df<-data.frame()
human_subsampled<-data.frame(sample(human_isize_expanded, length(CMV_isize_exanded)))
colnames(human_subsampled)[1]<-'isizes'
human_subsampled$type = 'human'
cmv_isize_df$type = 'cmv'
colnames(cmv_isize_df)[1]<-'isizes'
subsampled_df<-rbind(human_subsampled, cmv_isize_df)
cum_frequency<-ggplot(subsampled_df, aes(x = subsampled_df$isizes, color = subsampled_df$type)) +
theme_classic() +
scale_color_manual(values=c("#ED6464", "#05188B")) +
theme(legend.position='none') +
xlab('Insert size') +
ylab ('Cumulative frequency') +
stat_ecdf(geom = 'step', size  =.75 ) +
xlim(c(0,500))
cum_frequency
shapiro.test(subsampled_df$isizes[subsampled_df$type=='human'])
#combined plot #cum_frequency
#red: ED6464
#blue: 05188B
plot_grid(combined_plot, cum_frequency, labels = c('A','B'))
combined_plot
shapiro.test(subsampled_df$isizes[subsampled_df$type=='human'])
ggsave(plot = last_plot(), height = 3, width = 6, filename = 'figure_3.pdf')
getwd()
setwd('/Users/gerbix/Documents/vikas/NIPT/nipt_git_repo/reproducibility/CMV')
ggsave(plot = last_plot(), height = 3, width = 6, filename = 'figure_3.pdf')
#Panel
#red: ED6464
#blue: 05188B
plot_grid(combined_plot, cum_frequency, labels = c('A','B'))
ggsave(plot = last_plot(), height = 3, width = 6, filename = 'figure_3.pdf')
#matching container IDs to sequencing IDs and creating standard curves for cmv samples
library("ggplot2")
library("xlsx")
cmv_ids<-read.csv('/Users/gerbix/Documents/vikas/NIPT/new_samples/new_cmv_pulled_ids.csv', sep = '\t', header = FALSE, col.names = c('sequencing_id', 'bid', 'lmid'))
cmv_ids$bid<-as.character(cmv_ids$bid)
for(i in 1:nrow(cmv_ids)){
cmv_ids$bid[i]<-strsplit(as.character(cmv_ids$bid[i]), 'P')[[1]][2]
}
rpkm_values<-read.csv('/Users/gerbix/Documents/vikas/NIPT/new_samples/all_sample_data.csv')
rpkm_values$sample<-as.character(rpkm_values$sample)
rpkm_values$rpm<-as.numeric(as.character(rpkm_values$rpm))
cmv_quants<-read.xlsx('/Users/gerbix/Documents/vikas/NIPT/new_samples/CMVPulled.xlsx', sheetIndex = 1)
rpkm_values$quant<-NA
rpkm_values$sample<-as.character(rpkm_values$sample)
for(i in 1:nrow(cmv_ids)){
temp<-which(grepl(cmv_ids$sequencing_id[i],rpkm_values$sample))
print(rpkm_values$sample[temp])
temp_quant<-which(grepl(cmv_ids$bid[i], as.character(cmv_quants$Barcode.ID.)))
rpkm_values$quant[temp]<-cmv_quants$result_num[temp_quant]
}
#matching container IDs to sequencing IDs and creating standard curves for cmv samples
library("ggplot2")
library("xlsx")
cmv_ids<-read.csv('/Users/gerbix/Documents/vikas/NIPT/new_samples/new_cmv_pulled_ids.csv', sep = '\t', header = FALSE, col.names = c('sequencing_id', 'bid', 'lmid'))
cmv_ids$bid<-as.character(cmv_ids$bid)
for(i in 1:nrow(cmv_ids)){
cmv_ids$bid[i]<-strsplit(as.character(cmv_ids$bid[i]), 'P')[[1]][2]
}
rpkm_values<-read.csv('/Users/gerbix/Documents/vikas/NIPT/new_samples/all_sample_data.csv')
rpkm_values$sample<-as.character(rpkm_values$sample)
rpkm_values$rpm<-as.numeric(as.character(rpkm_values$rpm))
cmv_quants<-read.xlsx('/Users/gerbix/Documents/vikas/NIPT/new_samples/CMVPulled.xlsx', sheetIndex = 1)
rpkm_values$quant<-NA
rpkm_values$sample<-as.character(rpkm_values$sample)
for(i in 1:nrow(cmv_ids)){
temp<-which(grepl(cmv_ids$sequencing_id[i],rpkm_values$sample))
print(rpkm_values$sample[temp])
temp_quant<-which(grepl(cmv_ids$bid[i], as.character(cmv_quants$Barcode.ID.)))
rpkm_values$quant[temp]<-cmv_quants$result_num[temp_quant]
}
rpkm_values$quant_adjusted<-rpkm_values$quant * 4
curve<-ggplot(rpkm_values, aes(x = rpm, y = quant)) +
geom_point() +
#  scale_x_log10() +
ylim(c(0,20000)) +
#xlim(c(0,3)) +
geom_smooth(method = "lm", se = FALSE, alpha = .5) +
theme_classic() +
geom_vline(xintercept = .3, linetype = 'dotted')
curve
original_cmv<-read.xlsx('/Users/gerbix/Documents/vikas/NIPT/31119_download/qpcr_graph_update/6131_cmv_percent_vs_qpcr_load.xlsx', sheetIndex = 1)
original_reformatted<- original_cmv[,c(1,4,11,12,13,14,15)]
colnames(original_reformatted)<-c('sample','quant','count','rpkm','read_counts','rpm','classification')
original_reformatted$time<-'original'
original_reformatted$quant_adjusted<-original_reformatted$quant
rpkm_values$X<-NULL
rpkm_values$time<-'new'
original_new_combined<-rbind(original_reformatted,rpkm_values)
original_new_combined$time<-as.character(original_new_combined$time)
library(RColorBrewer)
getPalette = colorRampPalette(brewer.pal(8, "Set3"))
colourCount = length(unique(original_new_combined$time))
plot<-ggplot(original_new_combined, aes(x = rpm, y = quant_adjusted, color= time)) +
geom_point() +
scale_y_log10(breaks = c( 1, 10, 100, 1000, 10000,100000))+
scale_x_log10(limits = c(.01, 100)) +
#geom_hline(yintercept = 68000) +
geom_smooth(method = "lm", se = FALSE, alpha = .5, aes(group=1), color = 'black') +
scale_color_manual(values = c( "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5")) +
theme_classic()  +
theme(legend.title=element_blank(), legend.position = 'none')
#geom_vline(xintercept = .3, linetype = 'dotted')
plot
cmv_quants<-read.xlsx('/Users/gerbix/Documents/vikas/NIPT/new_samples/CMVPulled.xlsx', sheetIndex = 1)
cmv_ids<-read.csv('/Users/gerbix/Documents/vikas/NIPT/new_samples/new_cmv_pulled_ids.csv', sep = '\t', header = FALSE, col.names = c('sequencing_id', 'bid', 'lmid'))
cmv_ids$bid<-as.character(cmv_ids$bid)
for(i in 1:nrow(cmv_ids)){
cmv_ids$bid[i]<-strsplit(as.character(cmv_ids$bid[i]), 'P')[[1]][2]
}
rpkm_values<-read.csv('/Users/gerbix/Documents/vikas/NIPT/new_samples/deduplicated/all_sample_data.csv')
rpkm_values$sample<-as.character(rpkm_values$sample)
rpkm_values$rpm<-as.numeric(as.character(rpkm_values$rpm))
cmv_quants<-read.xlsx('/Users/gerbix/Documents/vikas/NIPT/new_samples/CMVPulled.xlsx', sheetIndex = 1)
rpkm_values$quant<-NA
rpkm_values$sample<-as.character(rpkm_values$sample)
for(i in 1:nrow(cmv_ids)){
temp<-which(grepl(cmv_ids$sequencing_id[i],rpkm_values$sample))
print(rpkm_values$sample[temp])
temp_quant<-which(grepl(cmv_ids$bid[i], as.character(cmv_quants$Barcode.ID.)))
rpkm_values$quant[temp]<-cmv_quants$result_num[temp_quant]
}
rpkm_values$quant_adjusted<-rpkm_values$quant * 4
curve<-ggplot(rpkm_values, aes(x = rpm, y = quant)) +
geom_point() +
#  scale_x_log10() +
ylim(c(0,20000)) +
#xlim(c(0,3)) +
geom_smooth(method = "lm", se = FALSE, alpha = .5) +
theme_classic() +
geom_vline(xintercept = .3, linetype = 'dotted')
curve
original_cmv<-read.xlsx('/Users/gerbix/Documents/vikas/NIPT/31119_download/qpcr_graph_update/6131_cmv_percent_vs_qpcr_load.xlsx', sheetIndex = 1)
original_reformatted<- original_cmv[,c(1,4,11,12,13,14,15)]
colnames(original_reformatted)<-c('sample','quant','count','rpkm','read_counts','rpm','classification')
original_reformatted$time<-'original'
original_reformatted$quant_adjusted<-original_reformatted$quant
rpkm_values$X<-NULL
rpkm_values$time<-'new'
original_new_combined<-rbind(original_reformatted,rpkm_values)
original_new_combined$time<-as.character(original_new_combined$time)
library(RColorBrewer)
getPalette = colorRampPalette(brewer.pal(8, "Set3"))
colourCount = length(unique(original_new_combined$time))
plot<-ggplot(original_new_combined, aes(x = rpm, y = quant_adjusted, color= time)) +
geom_point() +
scale_y_log10(breaks = c( 1, 10, 100, 1000, 10000,100000))+
scale_x_log10(limits = c(.01, 100)) +
#geom_hline(yintercept = 68000) +
geom_smooth(method = "lm", se = FALSE, alpha = .5, aes(group=1), color = 'black') +
scale_color_manual(values = c( "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5")) +
theme_classic()  +
theme(legend.title=element_blank(), legend.position = 'none')
#geom_vline(xintercept = .3, linetype = 'dotted')
plot
plot<-ggplot(original_new_combined, aes(x = rpm, y = quant_adjusted, color= time)) +
geom_point() +
scale_y_log10(breaks = c( 1, 10, 100, 1000, 10000,100000))+
scale_x_log10(limits = c(.01, 100)) +
#geom_hline(yintercept = 68000) +
geom_smooth(method = "lm", se = FALSE, alpha = .5, aes(group=1), color = 'black') +
scale_color_manual(values = c( "#BF6FF7", "#729AF2")) +
theme_classic()  +
theme(legend.title=element_blank(), legend.position = 'none')
#geom_vline(xintercept = .3, linetype = 'dotted')
plot
plot<-ggplot(original_new_combined, aes(x = rpm, y = quant_adjusted, color= time)) +
geom_point() +
scale_y_log10(breaks = c( 1, 10, 100, 1000, 10000,100000))+
scale_x_log10(limits = c(.01, 100)) +
#geom_hline(yintercept = 68000) +
geom_smooth(method = "lm", se = FALSE, alpha = .5, aes(group=1), color = 'black') +
scale_color_manual(values = c("#729AF2","#BF6FF7")) +
theme_classic()  +
theme(legend.title=element_blank(), legend.position = 'none')
#geom_vline(xintercept = .3, linetype = 'dotted')
plot
summary(lm(rpm ~ quant_adjusted, data=original_new_combined))
